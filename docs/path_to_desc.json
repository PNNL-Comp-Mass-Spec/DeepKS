{
   "('DeepKS', 'tools', 'splash', 'main_api.splash')": "Splash screen for the main api",
   "('DeepKS', 'tools', 'splash', 'main_gc_trainer.splash')": "Splash screen for the group classifier trainer",
   "('DeepKS', 'tools', 'splash', 'write_splash.py')": "",
   "('DeepKS', 'tools', 'splash', 'main_nn_trainer.splash')": "Splash screen for the neural network trainer",
   "('DeepKS', 'tools', 'splash')": "",
   "('DeepKS', 'tools', 'tunings', 'a_tuning_2023-05-05@18`24`53.0@-04`00.json')": "",
   "('DeepKS', 'tools', 'tunings', 'a_tuning_2023-05-05@18`28`15.5@-04`00.json')": "",
   "('DeepKS', 'tools', 'tunings')": "Directory containing hyperparameter tuning configurations and their associated scores. (Examples below)",
   "('DeepKS', 'tools', 'model_utils.py')": "Contains various functions that support the neural network definitions in <code>DeepKS/models/main.py</code>.",
   "('DeepKS', 'tools', 'cached_docs.json')": "Used to cache documentation for <code>./informative_tb</code>.",
   "('DeepKS', 'tools', 'formal_layers.py')": "Contains definitions for wrapper classes for PyTorch layers that don't have a formal definition in PyTorch. For example, <code>class Flatten</code> is a wrapper for <code>torch.nn.Flatten</code>.",
   "('DeepKS', 'tools', 'tensorize.py')": "Script that converts a CSV or <code>pandas.DataFrame</code> into a <code>torch.Tensor</code>, moves it to the computation device, and creates a <code>torch.utils.data.DataLoader</code>s.",
   "('DeepKS', 'tools', 'nice_printer.py')": "",
   "('DeepKS', 'tools', 'NNInterface.py')": "Definition of large class (<code>class NNInterface</code>) that provides a clean user interface for NN training, predict, plotting, saving, among other things.",
   "('DeepKS', 'tools', 'raw_score_to_prob.py')": "Utility to convert raw scores into probabilities.",
   "('DeepKS', 'tools', 'make_fasta.py')": "Utility to create a FASTA file from an input dataframe of sequences.",
   "('DeepKS', 'tools', 'system_tools.py')": "Script containing a wrapper for <code>subprocess.run</code> that can print and/or capture the output of a command.",
   "('DeepKS', 'tools', 'new_treemaker.py')": "",
   "('DeepKS', 'tools', 'legacy_plotting.py')": "",
   "('DeepKS', 'tools', 'bipartite_derangement.py')": "Contains functions that generate derangements using bipartite graphs.",
   "('DeepKS', 'tools', 'get_array_percentile.py')": "Given a <code>numpy</code> array, returns boolean array representing whether each element is in the top <code>percentile</code> of the array.",
   "('DeepKS', 'tools', 'custom_tqdm.py')": "",
   "('DeepKS', 'tools', 'make_call_graph.py')": "Create a call graph to understand the flow of a program.",
   "('DeepKS', 'tools', 'file_names.py')": "Module that creates time-stamped files with a prefix and suffix.",
   "('DeepKS', 'tools', 'roc_helpers.py')": "",
   "('DeepKS', 'tools', 'Tuner.py')": "",
   "('DeepKS', 'tools', 'informative_tb.py')": "Script to print a more informative, user-friendly traceback.",
   "('DeepKS', 'tools', 'get_needle_pairwise.py')": "Script to get pairwise distances using EMBOSS's <code>needle</code> program.",
   "('DeepKS', 'tools', 'make_call_graph_demonstrator.py')": "Helper file in the demonstration the use of <code>./make_call_graph.py</code>.",
   "('DeepKS', 'tools', 'custom_logging.py')": "",
   "('DeepKS', 'tools', 'schema_validation.py')": "Script that validates a JSON file against a JSON schema. Specifically used to validate the JSON files that contain site and kinase information (metadata).",
   "('DeepKS', 'tools')": "Miscellaneous tools used in the project.",
   "('DeepKS', 'bin', 'deepks_nn_weights.-1.cornichon')": "",
   "('DeepKS', 'bin', 'deepks_gc_weights.-1.cornichon')": "",
   "('DeepKS', 'bin')": "Contains various binary files (typically machine learning previously trained models).",
   "('DeepKS', 'out', 'results_2023-05-03@19`00`34.4@-04`00.csv')": "",
   "('DeepKS', 'out', 'results_2023-05-03@19`00`36.6@-04`00.sqlite')": "",
   "('DeepKS', 'out', 'results_2023-05-03@19`00`32.0@-04`00.json')": "",
   "('DeepKS', 'out')": "Directory containing resultant predictions from the DeepKS model. (Examples below.)",
   "('DeepKS', 'config', 'logging.py')": "",
   "('DeepKS', 'config', 'cfg.py')": "Global configuration module. Has functions to set/get prediction modes and perform directory changes.",
   "('DeepKS', 'config', 'logging_config.json')": "",
   "('DeepKS', 'config', 'mode.cfg')": "Contains the current settings (prediction mode, verbosity mode \u00a1Not implemented yet.\u00a1). This is read by <code>./cfg.py</code>.",
   "('DeepKS', 'config', 'API_IMPORT_MODE.json')": "",
   "('DeepKS', 'config', 'join_first.py')": "",
   "('DeepKS', 'config')": "Contains global configuration files for the DeepKS package.",
   "('DeepKS', 'images', 'Sankey', 'big_sankey.pdf')": "",
   "('DeepKS', 'images', 'Sankey', 'flows.csv')": "",
   "('DeepKS', 'images', 'Sankey', 'make_sankey.py')": "",
   "('DeepKS', 'images', 'Sankey')": "",
   "('DeepKS', 'images', 'GroupDistributions', 'proportional_distribution_reprod.svg')": "",
   "('DeepKS', 'images', 'GroupDistributions', 'relative_distributions_reprod.svg')": "",
   "('DeepKS', 'images', 'GroupDistributions', 'get_group_distribution_diagrams.py')": "",
   "('DeepKS', 'images', 'GroupDistributions')": "",
   "('DeepKS', 'images', 'Stripes', 'NewerVersion', 'motif_site_diagrams.py')": "",
   "('DeepKS', 'images', 'Stripes', 'NewerVersion')": "",
   "('DeepKS', 'images', 'Stripes', 'motif_site_diagrams.py')": "",
   "('DeepKS', 'images', 'Stripes')": "",
   "('DeepKS', 'images', 'ExcelMatrix', 'format_matrix_for_excel.py')": "",
   "('DeepKS', 'images', 'ExcelMatrix')": "",
   "('DeepKS', 'images', 'Animation', 'AlgorithmAnimation.py')": "",
   "('DeepKS', 'images', 'Animation')": "",
   "('DeepKS', 'images', 'KinaseOverlap', 'kinase_overlap.py')": "",
   "('DeepKS', 'images', 'KinaseOverlap', 'psp_human_kinase_table.csv')": "",
   "('DeepKS', 'images', 'KinaseOverlap', 'Uniprot_ST_Kinases.xlsx')": "",
   "('DeepKS', 'images', 'KinaseOverlap', 'psp_kinase_table.csv')": "",
   "('DeepKS', 'images', 'KinaseOverlap', 'Uniprot_Y_Kinases.xlsx')": "",
   "('DeepKS', 'images', 'KinaseOverlap', 'human_kinase_overlap.pdf')": "",
   "('DeepKS', 'images', 'KinaseOverlap')": "",
   "('DeepKS', 'images', 'EvaluationandResults', 'ROC', 'test_roc.py')": "",
   "('DeepKS', 'images', 'EvaluationandResults', 'ROC', 'SplitIntoGroupsROC_plot_2023-05-10@14`24`10.9@-04`00.pdf')": "",
   "('DeepKS', 'images', 'EvaluationandResults', 'ROC', 'SplitIntoGroupsROC_plot_2023-05-05@18`43`36.0@-04`00.pdf')": "",
   "('DeepKS', 'images', 'EvaluationandResults', 'ROC', 'fast_images.py')": "",
   "('DeepKS', 'images', 'EvaluationandResults', 'ROC', 'SplitIntoGroupsROC_plot_2023-05-10@14`06`26.8@-04`00.pdf')": "",
   "('DeepKS', 'images', 'EvaluationandResults', 'ROC')": "",
   "('DeepKS', 'images', 'EvaluationandResults', 'plot_probabilities.py')": "",
   "('DeepKS', 'images', 'EvaluationandResults')": "",
   "('DeepKS', 'images', 'PhyloFamilies', '.lintr')": "",
   "('DeepKS', 'images', 'PhyloFamilies', 'phylo_families.R')": "",
   "('DeepKS', 'images', 'PhyloFamilies', 'phylo_families_Cairo.pdf')": "",
   "('DeepKS', 'images', 'PhyloFamilies')": "",
   "('DeepKS', 'images', 'Sunburst', 'sunburst.pdf')": "",
   "('DeepKS', 'images', 'Sunburst', 'Onion Explainer.xlsx')": "",
   "('DeepKS', 'images', 'Sunburst', 'sunburst explainer.pdf')": "",
   "('DeepKS', 'images', 'Sunburst', 'sunburst explainer simple.pdf')": "",
   "('DeepKS', 'images', 'Sunburst', 'sunburst.py')": "",
   "('DeepKS', 'images', 'Sunburst')": "",
   "('DeepKS', 'images', 'SimilarityHist', 'similarity_hist.py')": "",
   "('DeepKS', 'images', 'SimilarityHist', 'GMM.ipynb')": "",
   "('DeepKS', 'images', 'SimilarityHist', 'similarity_hist.ipynb')": "",
   "('DeepKS', 'images', 'SimilarityHist')": "",
   "('DeepKS', 'images', 'Inverse_stride_derivation.pdf')": "",
   "('DeepKS', 'images')": "Contains subdirectories with scripts to generate images, graphs, and diagrams for DeepKS.",
   "('DeepKS', 'discovery', 'all_human_pairs', 'phosphosites_base.txt')": "Base file containing all human phosphosites.",
   "('DeepKS', 'discovery', 'all_human_pairs', 'run_main_api.sh')": "Convenience script to run the main API to predict all human kinase-substrate pairs.",
   "('DeepKS', 'discovery', 'all_human_pairs', 'download_necessary_kinases.py')": "Download necessary kinase sequences from Uniprot.",
   "('DeepKS', 'discovery', 'all_human_pairs', 'sequences_table.csv')": "Intermediate file as a product of <code>./download_necessary_kinases.py</code>.",
   "('DeepKS', 'discovery', 'all_human_pairs')": "Contains files used to generate the predictions for all human kinase-substrate pairs.",
   "('DeepKS', 'discovery', 'nature_atlas', 'atlas_vs_deepks_2_figures.ipynb')": "Notebook containing scripts to plot figures representing the comparison between DeepKS and Atlas.",
   "('DeepKS', 'discovery', 'nature_atlas', 'fast.ipynb')": "",
   "('DeepKS', 'discovery', 'nature_atlas', 'run_main_api.sh')": "",
   "('DeepKS', 'discovery', 'nature_atlas', 'atlas_vs_deepks_3_corroboration.ipynb')": "Notebook containing scripts to corroborate the PSP database and Atlas's results.",
   "('DeepKS', 'discovery', 'nature_atlas', 'compact_site_info_86201.json')": "",
   "('DeepKS', 'discovery', 'nature_atlas', 'compact_kinase_info_10.json')": "",
   "('DeepKS', 'discovery', 'nature_atlas', 'atlas_vs_deepks_1_processing.ipynb')": "Notebook containing scripts to enable comparison between DeepKS and Atlas.",
   "('DeepKS', 'discovery', 'nature_atlas', 'kinase_list_10.txt')": "",
   "('DeepKS', 'discovery', 'nature_atlas', 'get_sites_and_kinases.py')": "Script that helps extract the necessary kinase sequences and site sequences from Atlas's data.",
   "('DeepKS', 'discovery', 'nature_atlas', 'site_list_7890.txt')": "",
   "('DeepKS', 'discovery', 'nature_atlas', 'scrape.py')": "Script that is a precursor for <code>./atlas_vs_deepks_3_corroboration.ipynb</code> that gets Atlas predictions for the PSP database sites.",
   "('DeepKS', 'discovery', 'nature_atlas')": "Contains files used to validate DeepKS against the <a href='https://www.nature.com/articles/s41586-022-05575-3'> Nature Atlas paper</a>.",
   "('DeepKS', 'discovery', 'discovery_preparation.py')": "Contains scripts to process discovery data into a form that can be accepted by the API.",
   "('DeepKS', 'discovery')": "Contains files and subdirectories used for the discovery of new kinase-substrate predictions.",
   "('DeepKS', 'tests', 'sample_inputs', 'sample_hp_configs', 'KSR_params_Classic.json')": "",
   "('DeepKS', 'tests', 'sample_inputs', 'sample_hp_configs', 'KSR_params_ATTNWSELF.json')": "",
   "('DeepKS', 'tests', 'sample_inputs', 'sample_hp_configs', 'KSR_params_RNN.json')": "",
   "('DeepKS', 'tests', 'sample_inputs', 'sample_hp_configs')": "Directory containing sample hyperparameter/model configurations",
   "('DeepKS', 'tests', 'sample_inputs', 'small_train.csv')": "",
   "('DeepKS', 'tests', 'sample_inputs', 'msc_resave.-1.cornichon')": "",
   "('DeepKS', 'tests', 'sample_inputs', 'sites.txt')": "",
   "('DeepKS', 'tests', 'sample_inputs', 'kins.txt')": "",
   "('DeepKS', 'tests', 'sample_inputs', 'kin-info.json')": "",
   "('DeepKS', 'tests', 'sample_inputs', 'sites-prod.txt')": "",
   "('DeepKS', 'tests', 'sample_inputs', 'small_val_or_test.csv')": "",
   "('DeepKS', 'tests', 'sample_inputs', 'kin-info-known-groups.json')": "",
   "('DeepKS', 'tests', 'sample_inputs', 'site-info.json')": "",
   "('DeepKS', 'tests', 'sample_inputs')": "Sample inputs for the unit tests.",
   "('DeepKS', 'tests', 'examples.json')": "File containing a list of lists, each of which are the command-line arguments for an example run.",
   "('DeepKS', 'tests', 'test.py')": "Main testing script to run.",
   "('DeepKS', 'tests')": "Unit tests for the project.",
   "('DeepKS', 'architectures', 'architecture (IC-DEFAULT).txt-TK')": "",
   "('DeepKS', 'architectures', 'architecture (IC-DEFAULT).txt-NON-TK')": "",
   "('DeepKS', 'architectures', 'HP_config_DB.tsv')": "Database of hyperparameter configurations.",
   "('DeepKS', 'architectures')": "Contains the architectures used in this package.",
   "('DeepKS', 'models', 'convenience scripts', 'train_multi_stage_classifier.sh')": "",
   "('DeepKS', 'models', 'convenience scripts', 'train_individual_classifiers.sh')": "",
   "('DeepKS', 'models', 'convenience scripts')": "Contains bash scripts that can be used to train the models. Each call the relevant python module with the correct command-line arguments.",
   "('DeepKS', 'models', 'json', 'hp_tuning_grids.json')": "Contains hyperparameter tuning grids for the neural networks.",
   "('DeepKS', 'models', 'json', 'tok_dict.json')": "Contains the token dictionary (mapping amino acid character + [\"X\", padding token, n-gram size]) used to tensorize neural network input data.",
   "('DeepKS', 'models', 'json')": "Contains auxillary <code>.json</code> files used by the model.",
   "('DeepKS', 'models', 'hyperparameters', 'NNI_params.json')": "",
   "('DeepKS', 'models', 'hyperparameters', 'KSR_training_params.json')": "",
   "('DeepKS', 'models', 'hyperparameters', 'KSR_params.json')": "",
   "('DeepKS', 'models', 'hyperparameters')": "Directory containing hyperparameter configurations for the neural networks.",
   "('DeepKS', 'models', 'cached_docs.json')": "Cache of official python <code>Exception</code> documents.",
   "('DeepKS', 'models', 'GC_params.json')": "",
   "('DeepKS', 'models', 'KinaseSubstrateRelationshipATTNWSELF.py')": "",
   "('DeepKS', 'models', 'individual_classifiers.py')": "Contains python definitions of the individual neural network classifiers (<code>class IndividualClassifier</code>).",
   "('DeepKS', 'models', 'training_call_graph.py')": "",
   "('DeepKS', 'models', 'KSRProtocol.py')": "",
   "('DeepKS', 'models', 'multi_stage_classifier.py')": "Contains python definitions of the multi-stage classifier (<code>class MultiStageClassifier</code>) that combines the group and individual classifiers.",
   "('DeepKS', 'models', 'data_dict_output_test.csv')": "",
   "('DeepKS', 'models', 'DeepKS_evaluation.py')": "",
   "('DeepKS', 'models', 'logos.ipynb')": "",
   "('DeepKS', 'models', 'site_classifier.py')": "",
   "('DeepKS', 'models', 'KinaseSubstrateRelationshipATTN.py')": "",
   "('DeepKS', 'models', 'KinaseSubstrateRelationshipClassic.py')": "",
   "('DeepKS', 'models', 'extract.py')": "",
   "('DeepKS', 'models', 'KinaseSubstrateRelationshipLSTM.py')": "",
   "('DeepKS', 'models', 'GroupClassifier.py')": "",
   "('DeepKS', 'models')": "Directory containing the implementation of components of the DeepKS model.",
   "('DeepKS', 'docs', 'no_timestamp_templates', 'footer.html')": "A new footer template that does not include a timestamp (for git purposes).",
   "('DeepKS', 'docs', 'no_timestamp_templates')": "Directory containing templates for pydoctor documentation.",
   "('DeepKS', 'docs', 'api_pydoctor_docs', 'index.html')": "The main page of the API-reference documentation.",
   "('DeepKS', 'docs', 'api_pydoctor_docs')": "Contains API-reference documentation generated by the <code>pydoctor</code> package.",
   "('DeepKS', 'docs', 'quickstart.html')": "HTML rendering of the quickstart guide.",
   "('DeepKS', 'docs', 'tree.html')": "HTML file that displays a tree of DeepKS Repository.",
   "('DeepKS', 'docs', 'index.html')": "HTML rendering of the main documentation page; Used by Github pages to generate main webpage.",
   "('DeepKS', 'docs', 'cuda_installation.md')": "Markdown version of the CUDA installation guide.",
   "('DeepKS', 'docs', 'quickstart.md')": "Markdown version of the quickstart guide.",
   "('DeepKS', 'docs', 'cuda_installation.html')": "HTML rendering of the CUDA installation guide.",
   "('DeepKS', 'docs', 'API Docs Icon.png')": "An icon used to link to the API reference documentation.",
   "('DeepKS', 'docs', 'index.md')": "Markdown version of the main documentation page.",
   "('DeepKS', 'docs', 'path_to_desc.json')": "",
   "('DeepKS', 'docs')": "Contains files used to generate the documentation.",
   "('DeepKS', 'public')": "Used for Gitlab pages.",
   "('DeepKS', 'examples', 'examples_api_call_graph.py')": "",
   "('DeepKS', 'examples', 'examples.pdf')": "PDF of how the example output should look.",
   "('DeepKS', 'examples', 'examples.py')": "Contains examples of how to use the API.",
   "('DeepKS', 'examples', '__main__.py')": "Entrypoint wrapper for running examples. Calls <code>./examples.py</code>.",
   "('DeepKS', 'examples')": "Examples one can run to get a feel for the API.",
   "('DeepKS', 'api', 'cfg.py')": "Contains configuration paths for the API.",
   "('DeepKS', 'api', 'kin-info_file_format.txt')": "Contains information about how kin-info files need to be formatted.",
   "('DeepKS', 'api', 'run_main_api.sh')": "",
   "('DeepKS', 'api', 'site-info_file_format.txt')": "Contains information about how site-info files need to be formatted.",
   "('DeepKS', 'api', 'default_paths.cfg.json')": "Contains data read by <code>./cfg.py</code>",
   "('DeepKS', 'api', 'main.py')": "Main API entry point.",
   "('DeepKS', 'api')": "Contains the API for the DeepKS package.",
   "('DeepKS', 'scripts', 'hpc', '.interactive_slurm_script.py')": "Script to interactively initialize a Slurm job on a High Performance Computing cluster.",
   "('DeepKS', 'scripts', 'hpc')": "",
   "('DeepKS', 'scripts', 'remove-symlinks.sh')": "",
   "('DeepKS', 'scripts', 'cuda_wsl_installer.sh')": "Shell script used to install CUDA on WSL.",
   "('DeepKS', 'scripts', 'selective_black.sh')": "",
   "('DeepKS', 'scripts', 'generate_docs.sh')": "",
   "('DeepKS', 'scripts', 'scripts_and_nvidia_script.sh')": "Shell script used to enable CUDA on HPC/apptainer.",
   "('DeepKS', 'scripts')": "Contains auxiliary scripts files.",
   "('DeepKS', 'data', 'raw_data', 'cache', 'UNIPROT_kinase_sequences.fasta')": "",
   "('DeepKS', 'data', 'raw_data', 'cache')": "Cache storing uniprot kinase sequences.",
   "('DeepKS', 'data', 'raw_data', 'duplicates.csv')": "",
   "('DeepKS', 'data', 'raw_data', 'kinase_seq_918.csv')": "",
   "('DeepKS', 'data', 'raw_data', 'raw_data_22473.csv')": "",
   "('DeepKS', 'data', 'raw_data', 'raw_data_22588.csv')": "",
   "('DeepKS', 'data', 'raw_data', 'raw_data_45176_formatted_65.csv')": "",
   "('DeepKS', 'data', 'raw_data', 'kinase_seq_826.csv')": "",
   "('DeepKS', 'data', 'raw_data', 'kinase_seq_833.csv')": "",
   "('DeepKS', 'data', 'raw_data', 'raw_data_22769.csv')": "",
   "('DeepKS', 'data', 'raw_data', 'raw_data_45538_formatted_65.csv')": "",
   "('DeepKS', 'data', 'raw_data', 'kinase_seq_822.txt')": "",
   "('DeepKS', 'data', 'raw_data', 'kinase_seq_494.csv')": "",
   "('DeepKS', 'data', 'raw_data', 'PSP_script_download.xlsx')": "Modified PSP data table.",
   "('DeepKS', 'data', 'raw_data')": "Contains raw and intermediate data. Files of the format <code>kinase_seq_X.csv</code> contain rows with Uniprot accession ID, Uniprot gene name, and kinase sequence, where X is the number of rows. Files of the format <code>raw_data_Y.csv</code> contain slightly processed and pruned data from the PSP excel download, where Y is the number of rows.",
   "('DeepKS', 'data', 'preprocessing', 'PreprocessingSteps', 'cache', 'kinbase-cache.json')": "",
   "('DeepKS', 'data', 'preprocessing', 'PreprocessingSteps', 'cache')": "Stores cached information about kinase groups from the internet. (Example Below.)",
   "('DeepKS', 'data', 'preprocessing', 'PreprocessingSteps', '.lintr')": "Contains information about what to and what not to lint in R.",
   "('DeepKS', 'data', 'preprocessing', 'PreprocessingSteps', 'format_raw_data_DD.py')": "Module to transform intermediate data tables into tensors that can be read by <code>torch</code>. (The \"DD\" stands for \"Double Data,\", i.e., taking X inputs and outputting 2X inputs.)",
   "('DeepKS', 'data', 'preprocessing', 'PreprocessingSteps', 'download_psp.py')": "Module to download most recent version of PhosphositePlus Database from the internet.",
   "('DeepKS', 'data', 'preprocessing', 'PreprocessingSteps', 'remove_overlaps.py')": "Script to remove instances of kinase-substrate pairs where the site is present in the training, validation, and test sets.",
   "('DeepKS', 'data', 'preprocessing', 'PreprocessingSteps', 'psp_exceptions.json')": "File of exceptions and modifications that have to be made to the PSP excel file.",
   "('DeepKS', 'data', 'preprocessing', 'PreprocessingSteps', 'complex_download_phospho.py')": "Script to get kinase groups and families by species. \u00a1Not working.\u00a1 Will probably not be fixed.",
   "('DeepKS', 'data', 'preprocessing', 'PreprocessingSteps', 'get_kin_fam_grp.py')": "Download kinase group and kinase family information from the internet.",
   "('DeepKS', 'data', 'preprocessing', 'PreprocessingSteps', 'split_into_sets_individual_deterministic_top_k.py')": "Algorithms to split the data into training, validation and test sets, based on kinase groups and families.",
   "('DeepKS', 'data', 'preprocessing', 'PreprocessingSteps', 'ML_data_pipeline.R')": "Reads raw data tables, downloads sequences from the internet and creates intermediate data tables.",
   "('DeepKS', 'data', 'preprocessing', 'PreprocessingSteps', 'compare_different_scored_splits.py')": "Utility that compares the similarity of different train/val/test splits.",
   "('DeepKS', 'data', 'preprocessing', 'PreprocessingSteps', 'Kinase_Inference_Testing.R')": "Reads PSP data from excel file and creates raw data tables.",
   "('DeepKS', 'data', 'preprocessing', 'PreprocessingSteps')": "Contains the preprocessing steps used to generate the data in this directory.",
   "('DeepKS', 'data', 'preprocessing', 'temp.csv')": "",
   "('DeepKS', 'data', 'preprocessing', 'fam_to_num_seq.csv')": "",
   "('DeepKS', 'data', 'preprocessing', 'kin_to_fam_to_grp_5.csv')": "",
   "('DeepKS', 'data', 'preprocessing', 'pairwise_mtx_1658.csv-TID-4')": "",
   "('DeepKS', 'data', 'preprocessing', 'pairwise_mtx_1658.csv-TID-3')": "",
   "('DeepKS', 'data', 'preprocessing', 'pairwise_mtx_1658.csv-TID-2')": "",
   "('DeepKS', 'data', 'preprocessing', 'pairwise_mtx_1658.csv-TID-5')": "",
   "('DeepKS', 'data', 'preprocessing', 'kin_to_fam_to_grp_826.csv')": "Example of a kinase-family-group table with 826 entries.",
   "('DeepKS', 'data', 'preprocessing', 'needleall.error')": "",
   "('DeepKS', 'data', 'preprocessing', 'te_kins.json')": "List of kinases used in the test set (Uniprot gene names).",
   "('DeepKS', 'data', 'preprocessing', 'site_to_group_13588.json')": "",
   "('DeepKS', 'data', 'preprocessing', 'te_kins_large.json')": "",
   "('DeepKS', 'data', 'preprocessing', '22769.derangement')": "",
   "('DeepKS', 'data', 'preprocessing', 'kin_to_fam_to_grp_821.csv')": "",
   "('DeepKS', 'data', 'preprocessing', 'pairwise_mtx_833.csv')": "",
   "('DeepKS', 'data', 'preprocessing', 'pairwise_mtx_826.csv')": "",
   "('DeepKS', 'data', 'preprocessing', 'vl_kins.json')": "List of kinases used in the validation set (Uniprot gene names).",
   "('DeepKS', 'data', 'preprocessing', 'make_clean.py')": "Script to clean up data directory from files that can be regenerated using provided scripts.",
   "('DeepKS', 'data', 'preprocessing', 'vl_kins_large.json')": "",
   "('DeepKS', 'data', 'preprocessing', 'kin_to_fam_to_grp_817.csv')": "",
   "('DeepKS', 'data', 'preprocessing', 'pairwise_mtx_822.csv')": "",
   "('DeepKS', 'data', 'preprocessing', 'kin_to_fam_to_grp_828.csv')": "",
   "('DeepKS', 'data', 'preprocessing', 'tr_kins_large.json')": "",
   "('DeepKS', 'data', 'preprocessing', 'pairwise_mtx_1658.csv-TID-0')": "",
   "('DeepKS', 'data', 'preprocessing', 'pairwise_mtx_1658.csv-TID-7')": "",
   "('DeepKS', 'data', 'preprocessing', 'Kinase_Substrate_Dataset.gz')": "",
   "('DeepKS', 'data', 'preprocessing', 'main.py')": "The entrypoint for the preprocessing pipeline.",
   "('DeepKS', 'data', 'preprocessing', 'pairwise_mtx_1658.csv-TID-6')": "",
   "('DeepKS', 'data', 'preprocessing', 'pairwise_mtx_1658.csv-TID-1')": "",
   "('DeepKS', 'data', 'preprocessing', 'tr_kins.json')": "List of kinases used in the training set (Uniprot gene names).",
   "('DeepKS', 'data', 'preprocessing')": "Used to preprocess data into a format acceptable by the API and <code>torch</code>.",
   "('DeepKS', 'data', 'raw_data_162_group_classifier_formatted.csv')": "",
   "('DeepKS', 'data', 'raw_data_6406_formatted_95_5616.csv')": "",
   "('DeepKS', 'data', 'kin_to_fam_to_grp_5.csv')": "",
   "('DeepKS', 'data', 'raw_data_45176_formatted_65.csv')": "",
   "('DeepKS', 'data', 'raw_data_31834_formatted_65_26610.csv')": "",
   "('DeepKS', 'data', 'kin_to_fam_to_grp_821.csv')": "",
   "('DeepKS', 'data', 'raw_data_209_group_classifier_formatted.csv')": "",
   "('DeepKS', 'data', 'raw_data_6500_formatted_95_5698.csv')": "",
   "('DeepKS', 'data', 'raw_data_trunc_200.csv')": "",
   "('DeepKS', 'data', 'raw_data_446_group_classifier_formatted.csv')": "",
   "('DeepKS', 'data', 'raw_data_trunc_105.csv')": "",
   "('DeepKS', 'data', 'raw_data_trunc_100.csv')": "",
   "('DeepKS', 'data')": "Contains the data used in this package.  Train/val/test model inputs are of the form <code>raw_data_X_formatted_Y_Z.csv</code>, where X, Y, and Z (optional) are numbers that represent the initial number of inputs, the percentile cutoff for similarity (see data preprocessing details), and the number of inputs after overlaps were removed (again, see data preprocessing details), respectively.",
   "('DeepKS', 'requirements.txt')": "Used to install python dependencies.",
   "('DeepKS', '.pre-commit-config.yaml')": "",
   "('DeepKS', 'saved_dict_repr_file.json')": "",
   "('DeepKS', 'readme.md')": "Holds the icon one can click to view the Git(hub|lab) documentation pages.",
   "('DeepKS', 'Gemfile')": "Used for Gitlab Pages.",
   "('DeepKS',)": "The root directory of the DeepKS package."
}